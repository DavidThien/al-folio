; -*- mode: scheme -*-

(FPCore (i n)
 :name "Compound Interest"
 :herbie-target
 (if (and (<= (fabs (/ i n)) 1) (< i -1))
     (* 100 (- (/ (exp i) (/ i n)) (/ n i)))
     (if (and (>= (fabs (/ i n)) 1) (< -1 i 0) (< -1 n 0))
         (/ (/ (/ (- (pow (pow (pow (pow (+ 1 (/ i n)) n) 3) 3) 3) 1) (+ (+ (pow (pow (pow (+ 1 (/ i n)) n) 3) 3) 1) (* (pow (pow (pow (+ 1 (/ i n)) n) 3) 3) (pow (pow (pow (+ 1 (/ i n)) n) 3) 3)))) (+ (+ 1 (pow (pow (+ (/ i n) 1) n) 3)) (pow (pow (+ (/ i n) 1) n) (+ (+ 3 (+ 1 1)) 1)))) (/ (* (/ i n) (+ (+ (* 3 i) 3) (* i (* 5/2 i)))) 100))
         (if (and (>= (fabs (/ i n)) 1) (< 0 i 1) (< 0 n 1))
             (* 100 (/ (pow (exp (* (cbrt (- (log (* (+ (sqrt (pow (pow (+ (/ i n) 1) n) 3)) 1) (- (sqrt (pow (pow (+ (/ i n) 1) n) 3)) 1))) (log (+ (+ 1 (pow (+ (/ i n) 1) n)) (* (pow (+ (/ i n) 1) n) (pow (+ (/ i n) 1) n)))))) (cbrt (- (log (* (+ (sqrt (pow (pow (+ (/ i n) 1) n) 3)) 1) (- (sqrt (pow (pow (+ (/ i n) 1) n) 3)) 1))) (log (+ (+ 1 (pow (+ (/ i n) 1) n)) (* (pow (+ (/ i n) 1) n) (pow (+ (/ i n) 1) n)))))))) (cbrt (- (log (* (+ (sqrt (pow (pow (+ (/ i n) 1) n) 3)) 1) (- (sqrt (pow (pow (+ (/ i n) 1) n) 3)) 1))) (log (+ (+ 1 (pow (+ (/ i n) 1) n)) (* (pow (+ (/ i n) 1) n) (pow (+ (/ i n) 1) n))))))) (/ i n)))
             (if (<= i -1.4562885009438895)
                 (/ (- (pow (/ (/ (- 1) n) (/ (- 1) i)) n) 1) (/ i (* 100 n)))
                 (if (<= i 3059661.8928731075)
                     (* (* 100 (* (cbrt (+ 1 (* i (/ 1 2)))) (cbrt (+ 1 (* i (/ 1 2)))))) (* (cbrt (+ 1 (* i (/ 1 2)))) n))
                     (if (<= i 1.7390641936359746e254)
                         (* 100 (* (/ (* (cbrt (- (pow (+ 1 (/ i n)) n) 1)) (cbrt (- (pow (+ 1 (/ i n)) n) 1))) i) (* i (cbrt (- (pow (+ (/ i n) 1) n) 1)))))
                         (* (/ (* (cbrt (+ (* i (/ 1 2)) 1)) (cbrt (+ (* i (/ 1 2)) 1))) (/ (sqrt (/ i n)) 100)) (/ (cbrt (+ (* i (/ 1 2)) 1)) (/ (sqrt (/ i n)) i)))))))))
 (* 100 (/ (- (pow (+ 1 (/ i n)) n) 1) (/ i n))))

(FPCore (i n)
 :name "Compound Interest Bottom Left Triangle"
 :pre (and (<= (fabs (/ i n)) 1) (< i -1) (< n -1))
 (* 100 (/ (- (pow (+ 1 (/ i n)) n) 1) (/ i n))))

(FPCore (i n)
 :name "Compound Interest Middle Left Triangle"
 :pre (and (>= (fabs (/ i n)) 1) (< -1 i 0) (< -1 n 0))
 (* 100 (/ (- (pow (+ 1 (/ i n)) n) 1) (/ i n))))

(FPCore (i n)
 :name "Compound Interest Middle Right Triangle"
 :pre (and (>= (fabs (/ i n)) 1) (< 0 i 1) (< 0 n 1))
 (* 100 (/ (- (pow (+ 1 (/ i n)) n) 1) (/ i n))))

(FPCore (i n)
 :name "Compound Interest Non Triangles"
 :pre (not (or (and (<= (fabs (/ i n)) 1) (< i -1) (< n -1)) (and (>= (fabs (/ i n)) 1) (< -1 i 0) (< -1 n 0)) (and (>= (fabs (/ i n)) 1) (< 0 i 1) (< 0 n 1))))
 (* 100 (/ (- (pow (+ 1 (/ i n)) n) 1) (/ i n))))
